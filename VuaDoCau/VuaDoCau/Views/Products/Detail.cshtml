@model VuaDoCau.Models.Product
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject VuaDoCau.Data.VuaDoCauDbContext Db

@{
    ViewData["Title"] = Model.Name;

    // Thống kê đánh giá
    var stats = await Db.Reviews
        .Where(r => r.ProductId == Model.Id)
        .GroupBy(r => r.ProductId)
        .Select(g => new { Avg = g.Average(x => x.Stars), Cnt = g.Count() })
        .FirstOrDefaultAsync();

    decimal ratingAvg = stats?.Avg is null ? 0m : Math.Round((decimal)stats.Avg, 2);
    int ratingCnt = stats?.Cnt ?? 0;

    // Đã mua (tuỳ trạng thái bạn dùng)
    var bought = await (from oi in Db.OrderItems
                        join o in Db.Orders on oi.OrderId equals o.Id
                        where oi.ProductId == Model.Id
                              && (o.Status == "Completed" || o.Status == "Delivered" || o.Status == "Paid")
                        select (int?)oi.Quantity).SumAsync() ?? 0;

    // Xác định đã đánh giá hay chưa (1 user/1 sản phẩm chỉ 1 lần)
    var uid = User.Identity?.IsAuthenticated == true ? User.FindFirstValue(ClaimTypes.NameIdentifier) : null;
    var hasReviewed = uid != null
        ? await Db.Reviews.AnyAsync(r => r.ProductId == Model.Id && r.UserId == uid)
        : false;
}

<div class="container py-4">
    <div class="row g-4">
        <div class="col-md-5">
            <img src="@(string.IsNullOrWhiteSpace(Model.ImageUrl) ? "/images/no-image.png" : Model.ImageUrl)"
                 class="img-fluid rounded" alt="@Model.Name" />
        </div>

        <div class="col-md-7">
            <h1 class="h3 mb-2">@Model.Name</h1>

            <div class="mb-2 d-flex align-items-center gap-2">
                @await Html.PartialAsync("_Stars", ratingAvg)
                <span class="text-muted small">(@ratingCnt đánh giá)</span>
                <span class="text-muted small">• Đã mua: <strong>@bought</strong></span>
            </div>

            <div class="fs-4 fw-bold text-danger mb-3">
                @String.Format("{0:N0} đ", Model.Price)
            </div>

            <form asp-controller="Cart" asp-action="Add" method="post" class="d-flex align-items-center gap-2">
                <input type="hidden" name="productId" value="@Model.Id" />
                <input type="number" name="quantity" class="form-control" value="1" min="1" style="max-width:120px" />
                <button type="submit" class="btn btn-primary">Thêm vào giỏ</button>
                @Html.AntiForgeryToken()
            </form>

            <div class="mt-5">
                <h5>Gửi đánh giá</h5>

                @if (User.Identity?.IsAuthenticated != true)
                {
                    <div class="alert alert-info mt-2">
                        Vui lòng <a asp-controller="Account" asp-action="Login">đăng nhập</a> để đánh giá sản phẩm.
                    </div>
                }
                else if (hasReviewed)
                {
                    <div class="alert alert-secondary mt-2">Bạn đã đánh giá sản phẩm này.</div>
                }
                else
                {
                    <form asp-controller="Reviews" asp-action="Add" method="post" class="row g-2">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="productId" value="@Model.Id" />
                        <div class="col-auto">
                            <select name="stars" class="form-select">
                                <option value="5">5 ★</option>
                                <option value="4">4 ★</option>
                                <option value="3">3 ★</option>
                                <option value="2">2 ★</option>
                                <option value="1">1 ★</option>
                            </select>
                        </div>
                        <div class="col">
                            <input name="comment" class="form-control" placeholder="Nhận xét (tuỳ chọn)" />
                        </div>
                        <div class="col-auto">
                            <button type="submit" class="btn btn-success">Gửi</button>
                        </div>
                    </form>
                }

                @if (TempData["Msg"] != null)
                {
                    <div class="alert alert-success mt-2">@TempData["Msg"]</div>
                }
            </div>
        </div>
    </div>

    <div class="mt-5">
        <h5>Đánh giá gần đây</h5>
        @{
            var latest = await Db.Reviews
            .Where(r => r.ProductId == Model.Id)
            .OrderByDescending(r => r.CreatedAt)
            .Take(10)
            .ToListAsync();
        }
        @if (latest.Count == 0)
        {
            <div class="text-muted">Chưa có đánh giá nào.</div>
        }
        else
        {
            <ul class="list-group">
                @foreach (var r in latest)
                {
                    <li class="list-group-item">
                        <strong>@r.Stars ★</strong>
                        <span class="text-muted small"> • @r.CreatedAt.ToLocalTime().ToString("dd/MM/yyyy HH:mm")</span>
                        @if (!string.IsNullOrWhiteSpace(r.Comment))
                        {
                            <div>@r.Comment</div>
                        }
                    </li>
                }
            </ul>
        }
    </div>
</div>
